// /home/owens/Projects/Silica/src/serialization/json/lexer_json.yy.h generated by reflex 5.1.1 from ../src/serialization/json/json.l

#ifndef REFLEX__HOME_OWENS_PROJECTS_SILICA_SRC_SERIALIZATION_JSON_LEXER_JSON_YY_H
#define REFLEX__HOME_OWENS_PROJECTS_SILICA_SRC_SERIALIZATION_JSON_LEXER_JSON_YY_H
#define IN_HEADER 1
#define REFLEX_VERSION "5.1.1"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#undef REFLEX_OPTION_fast
#undef REFLEX_OPTION_freespace
#undef REFLEX_OPTION_header_file
#undef REFLEX_OPTION_lex
#undef REFLEX_OPTION_lexer
#undef REFLEX_OPTION_namespace
#undef REFLEX_OPTION_noindent
#undef REFLEX_OPTION_noline
#undef REFLEX_OPTION_outfile
#undef REFLEX_OPTION_unicode

#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_header_file         "/home/owens/Projects/Silica/src/serialization/json/lexer_json.yy.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               LexerJson
#define REFLEX_OPTION_namespace           rf_json
#define REFLEX_OPTION_noindent            true
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "src/lexer_json.yy.cpp"
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


  #include <cstdlib>  // strtoul(), strtod()
  #include <iostream> // std::cout etc.
  #include <iomanip>  // std::setw

  #include "position.hpp"


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define WITH_NO_INDENT
#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace rf_json {

class LexerJson : public reflex::AbstractLexer<reflex::Matcher> {

 public:
  LexerJson(const char* input, size_t input_size) : LexerJson(reflex::Input(input, input_size)){
  }

  silica::Position get_position() {
    return silica::Position{columno(), lineno()};
  }

  inline std::string& get_word() {
    return _word;
  }

 private:
  std::string _word; // token value

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  LexerJson(
      // a persistent source of input, empty by default
      const reflex::Input& input = reflex::Input(),
      // optional output stream, std::cout by default
      std::ostream& os = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  static const int STRING = 1;
  // the lexer function defined by SECTION 2
  virtual int lex(void);
  // lexer functions accepting new input to scan
  int lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  int lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

} // namespace rf_json

#endif
