#include "{{file_name}}.er.h"

// clang-format off
#include "er/reflection/the_great_table.h"
#include "er/types/common_actions.h"
#include "er/types/type_actions.h"

namespace er {

template <>
struct TypeActions<{{name}}> {
  static TypeInfo reflect(void* value, bool is_const) {
    auto* p = static_cast<{{name}}*>(value);

    static std::map<std::string_view, FieldDesc> map {
      {% for item in fields_static -%}
      {"{{item.alias}}", FieldDesc::create_static(&{{name}}::{{item.name}}, FieldAttributes::{{item.access}})},
      {% endfor %}
      {% for item in fields -%}
      {"{{item.alias}}", FieldDesc::create_member(p, &p->{{item.name}}, FieldAttributes::{{item.access}})},
      {% endfor %}
    };

    return Object(Var(p, is_const), &map);
  }
};

template <>
TypeId TypeId::get({{name}}* /*unused*/) {
  static TypeId id(TheGreatTable::record(Actions(&TypeActions<{{name}}>::reflect,        //
                                                 &CommonActions<{{name}}>::type_name,    //
                                                 &CommonActions<{{name}}>::type_size,    //
                                                 &CommonActions<{{name}}>::call_new,     //
                                                 &CommonActions<{{name}}>::call_delete,  //
                                                 &CommonActions<{{name}}>::copy)));
  return id;
}

}  // namespace er

// clang-format on
